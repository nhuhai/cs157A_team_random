DROP DATABASE IF EXISTS TENNIS;
CREATE DATABASE TENNIS;
USE TENNIS; 

-- Schema:
-- MEMBER (username, password, name, level)
DROP TABLE IF EXISTS MEMBER;
CREATE TABLE MEMBER (
	username VARCHAR(50),
	password VARCHAR(50),
	name VARCHAR(50),
	level INT DEFAULT 0 REFERENCES DISCOUNT(level),
	updatedAt DATE DEFAULT '0000-00-00',
	PRIMARY KEY(username)
);

DROP TABLE IF EXISTS MEMBER_ARCHIVED;
CREATE TABLE MEMBER_ARCHIVED (
	uername VARCHAR(50),
	password VARCHAR(50),
	name VARCHAR(50),
	level INT DEFAULT 0 REFERENCES DISCOUNT(level),
	updatedAt DATE DEFAULT '0000-00-00',
	PRIMARY KEY(username)
);

-- COURT (cID, inside, VIP, pricePerHour)
DROP TABLE IF EXISTS COURT;
CREATE TABLE COURT (
	cID INT,
	inside BOOLEAN DEFAULT FALSE,
	VIP BOOLEAN DEFAULT FALSE,
	pricePerHour INT,
	balance DOUBLE, 
	PRIMARY KEY(cID)
);

-- RESERVATION (username, cID, reserveDate, reserveTime, paid)
DROP TABLE IF EXISTS RESERVATION;
CREATE TABLE RESERVATION (
	username VARCHAR(50),
	cID INT REFERENCES COURT(cID),
	reserveDate DATE DEFAULT '0000-00-00',
	reserveTime INT,
	paid BOOLEAN DEFAULT FALSE,
	updatedAt DATE DEFAULT '0000-00-00',
	PRIMARY KEY(username,cID,reserveDate,reserveTime),
	FOREIGN KEY(username) REFERENCES MEMBER(username) ON DELETE CASCADE
);

DROP TABLE IF EXISTS RESERVATION_ARCHIVED;
CREATE TABLE RESERVATION_ARCHIVED (
	username VARCHAR(50),
	cID INT REFERENCES COURT(cID),
	reserveDate DATE DEFAULT '0000-00-00',
	reserveTime INT,
	paid BOOLEAN DEFAULT FALSE,
	updatedAt DATE DEFAULT '0000-00-00',
	PRIMARY KEY(username,cID,reserveDate,reserveTime),
	FOREIGN KEY(username) REFERENCES MEMBER(username) ON DELETE CASCADE
);

-- EQUIPMENT (username, borrowDate, numRacket, returned)
DROP TABLE IF EXISTS EQUIPMENT;
CREATE TABLE EQUIPMENT (
	username VARCHAR(50),
	borrowDate DATE DEFAULT '0000-00-00',
	numRacket INT,
	returned BOOLEAN DEFAULT FALSE,
	updatedAt DATE DEFAULT '0000-00-00',
	PRIMARY KEY(username,borrowDate),
	FOREIGN KEY(username) REFERENCES MEMBER(username) ON DELETE CASCADE
);

DROP TABLE IF EXISTS EQUIPMENT_ARCHIVED;
CREATE TABLE EQUIPMENT_ARCHIVED (
	username VARCHAR(50),
	borrowDate DATE DEFAULT '0000-00-00',
	numRacket INT,
	returned BOOLEAN DEFAULT FALSE,
	updatedAt DATE DEFAULT '0000-00-00',
	PRIMARY KEY(username,borrowDate),
	FOREIGN KEY(username) REFERENCES MEMBER(username) ON DELETE CASCADE
);

-- DISCOUNT (level, percent)
DROP TABLE IF EXISTS DISCOUNT;
CREATE TABLE DISCOUNT (
	level INT,
	percent INT,
	PRIMARY KEY(level)
);

DROP TRIGGER IF EXISTS DELETE_COURT_TRIGGER;
CREATE TRIGGER DELETE_COURT_TRIGGER
AFTER DELETE ON COURT
FOR EACH ROW
BEGIN
	DELETE FROM RESERVATION
	WHERE cID = old.cID
END;

DROP TRIGGER IF EXISTS MAX_THREE_RESERVATIONS_PER_DAY_TRIGGER;
DELIMITER //
CREATE TRIGGER MAX_THREE_RESERVATIONS_PER_DAY_TRIGGER
BEFORE INSERT ON RESERVATION
FOR EACH ROW
BEGIN
	IF ((SELECT COUNT(*) FROM RESERVATION WHERE reserveDate = new.reserveDate GROUP BY username) <= 3) THEN
		INSERT INTO RESERVATION (username, cID, reserveDate, reserveTime, updatedAt) VALUES (new.username, new.cID, new.reserveDate, new.reserveTime, new.updatedAt);
	END IF;
END//
DELIMITER ;

-- Insert Data into DISCOUNT
INSERT INTO DISCOUNT(level,percent) VALUES(1,5);
INSERT INTO DISCOUNT(level,percent) VALUES(1,5);
